# -*- coding: utf-8 -*-
"""SOM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Qd72k2xntZ0F49e8zn4ox9IOZcnWwTBk

#Self Organizing Map

##Install MiniSom Package
"""

!pip install MiniSom

"""### Importing the libraries"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""## Importing the dataset"""

dataset = pd.read_csv('Credit_Card_Applications.csv')   # UCI Machine Learning Repository <- Googling
                                                        # Statlog Australian Credit Approval Data Set
                                                        # http://archive.ics.uci.edu/ml/datasets/statlog+(australian+credit+approval)
                                                        # 690 x 16: Index(0~689), Column(ID, A1, ..., A14, Class)
                                                        # A15 = class - 0(disproved), 1(approved)
                                                        # node with highest MID; the Mean InterNode Distance -> outlier
X = dataset.iloc[:, :-1].values 
y = dataset.iloc[:, -1].values

"""## Feature Scaling"""

from sklearn.preprocessing import MinMaxScaler
sc = MinMaxScaler(feature_range = (0,1))
X = sc.fit_transform(X)

"""##Training the SOM"""

from minisom import MiniSom
som = MiniSom(x=10, y=10, input_len= 15, sigma = 1.0, learning_rate = 0.5)   # 'x' x 'y' nodes
                                                                            # input_length = # of indicators - CustomerID incluyded
som.random_weights_init(X)
som.train_random(data = X, num_iteration = 100)

"""##Visualizing the results"""

from pylab import bone, pcolor, colorbar, plot, show
bone()
pcolor(som.distance_map().T)                            # T - transpose
colorbar()                                              # run it with above - customer associated with white node
markers = ['o', 's']                                    # circle - square
colors = ['r', 'g']                                     # red - green - disaproved - approved
for i, x in enumerate(X):
    w = som.winner(x)
    plot(w[0] + 0.5,                                    # To make center of the node + 0.5
         w[1] + 0.5,                                    # (w[0], w[1]) = (x,y) of left lower corner of node square
         markers[y[i]],
         markeredgecolor = colors[y[i]],                # coloring edge only
         markerfacecolor = 'None',                      # inside of marker
         markersize = 10,
         markeredgewidth = 2)
show()

"""## Finding the frauds"""

mappings = som.win_map(X)
frauds = mappings[(2,8)]
#frauds = np.concatenate((mappings[(2,7)], mapping[(1,7)]), axis = 0)   #axis = 0 - vertically
frauds = sc.inverse_transform(frauds)

"""##Printing the Fraunch Clients"""

print('Fraud Customer IDs')
for i in frauds[:, 0]:
  print(int(i))